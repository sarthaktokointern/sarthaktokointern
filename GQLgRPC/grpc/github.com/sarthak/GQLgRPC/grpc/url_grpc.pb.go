// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/url.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	//codes "google.golang.org/grpc/codes"
	//status "google.golang.org/grpc/status"
	"net/url"
	"strings"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DisecturlClient is the client API for Disecturl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DisecturlClient interface {
	Url(ctx context.Context, in *Urlpath, opts ...grpc.CallOption) (*Disecturlpath, error)
}

type disecturlClient struct {
	cc grpc.ClientConnInterface
}

func NewDisecturlClient(cc grpc.ClientConnInterface) DisecturlClient {
	return &disecturlClient{cc}
}

func (c *disecturlClient) Url(ctx context.Context, in *Urlpath, opts ...grpc.CallOption) (*Disecturlpath, error) {
	UrlObj, err := url.Parse(in.GetURL())

	if err != nil {
		return &(Disecturlpath{}), err
	}

	host := strings.Split(UrlObj.Host, ".")

	return &(Disecturlpath{
		Scheme:            UrlObj.Scheme,
		Topleveldomain:    host[len(host)-1],
		Secondleveldomain: host[len(host)-2],
	}), nil

}

// DisecturlServer is the server API for Disecturl service.
// All implementations must embed UnimplementedDisecturlServer
// for forward compatibility
type DisecturlServer interface {
	Url(context.Context, *Urlpath) (*Disecturlpath, error)
	mustEmbedUnimplementedDisecturlServer()
}

// UnimplementedDisecturlServer must be embedded to have forward compatible implementations.
type UnimplementedDisecturlServer struct {
}

func (UnimplementedDisecturlServer) Url(ctx context.Context, x *Urlpath) (*Disecturlpath, error) {
	//return nil, status.Errorf(codes.Unimplemented, "method Url not implemented")
	UrlObj, err := url.Parse(x.GetURL())

	if err != nil {
		return &(Disecturlpath{}), err
	}

	host := strings.Split(UrlObj.Host, ".")

	return &(Disecturlpath{
		Scheme:            UrlObj.Scheme,
		Topleveldomain:    host[len(host)-1],
		Secondleveldomain: host[len(host)-2],
	}), nil


}
func (UnimplementedDisecturlServer) mustEmbedUnimplementedDisecturlServer() {}

// UnsafeDisecturlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DisecturlServer will
// result in compilation errors.
type UnsafeDisecturlServer interface {
	mustEmbedUnimplementedDisecturlServer()
}

func RegisterDisecturlServer(s grpc.ServiceRegistrar, srv DisecturlServer) {
	s.RegisterService(&Disecturl_ServiceDesc, srv)
}

func _Disecturl_Url_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Urlpath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisecturlServer).Url(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.disecturl/url",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisecturlServer).Url(ctx, req.(*Urlpath))
	}
	return interceptor(ctx, in, info, handler)
}

// Disecturl_ServiceDesc is the grpc.ServiceDesc for Disecturl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Disecturl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.disecturl",
	HandlerType: (*DisecturlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "url",
			Handler:    _Disecturl_Url_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/url.proto",
}
