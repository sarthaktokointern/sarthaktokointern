package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	
	"fmt"
	"sync"
	"time"

	"gopkg.in/gcfg.v1"

	"github.com/sarthaktokointern/Pillow_Backend_Exercise_1/graph/model"
)

type config struct{
	Config struct{
		XWaitTill int
		XRateLimit int
	}
}

var(
	RequestCnt = 0
	cfg config
	FinishTime time
	StartTime time
	
)

// RequestCounter is the resolver for the RequestCounter field.
func (r *queryResolver) RequestCounter(ctx context.Context) (*model.RequestData, error) {

	err := gcfg.ReadFileInto(&cfg,"config.ini")

	if err!=nil{
		return *model.RequestData,fmt.Errorf("Failed to parse config file:", err)
	}

	return UpdateRequestCounter()
	
	

}

func UpdateRequestCounter() (*model.RequestData, error) {
	var wg sync.WaitGroup

	wg.Add(1)
	go func() {
		defer wg.Done()
		if RequestCnt==cfg.Config.XRateLimit{
			if FinishTime == nil{
				StartTime = time.Now()
				FinishTime = StartTime.Add(cfg.Config.XWaitTill*int(time.Second))
			}else if(FinishTime==time.Now()){
				RequestCnt = 0;
				StartTime = nil
				FinishTime = nil
			}

			return *model.RequestData.Extensions{
				Status: 429,
				Message : "Too Many Requests!!",
				X_Wait_Till : cfg.Config.XWaitTill,
				X_Rate_Limit : cfg.Config.XRateLimit,
			},nil

			

			

		}else{
			RequestCnt++
			
		}
	}
	
	return *model.RequestData.Data{
		NumberOfRequests : RequestCnt,
	},nil

}

//Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
